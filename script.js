addEventListener('load', function() {

    console.log('Page loaded!');
    if (localStorage.saveSpringPoints) { // tavaszi pontok bet√∂lt√©se, ha van
        document.getElementById('spring').innerHTML = `Tavasz: <br>${localStorage.saveSpringPoints} pont`;
        document.getElementById('counter').innerHTML = `√ñsszesen: ${localStorage.saveAllPoints} pont`;
    }

    if (localStorage.saveSummerPoints) { // ny√°ri pontok bet√∂lt√©se, ha van
        document.getElementById('summer').innerHTML = `Ny√°r: <br>${localStorage.saveSummerPoints} pont`;
        document.getElementById('counter').innerHTML = `√ñsszesen: ${localStorage.saveAllPoints} pont`;
    }

    if (localStorage.saveAutumnPoints) { // ≈ëszi pontok bet√∂lt√©se, ha van
        document.getElementById('autumn').innerHTML = `≈êsz: <br>${localStorage.saveAutumnPoints} pont`;
        document.getElementById('counter').innerHTML = `√ñsszesen: ${localStorage.saveAllPoints} pont`;
    }

    if (localStorage.saveWinterPoints) { // t√©li pontok bet√∂lt√©se, ha van
        document.getElementById('winter').innerHTML = `T√©l: <br>${localStorage.saveWinterPoints} pont`;
        document.getElementById('counter').innerHTML = `√ñsszesen: ${localStorage.saveAllPoints} pont`;
    }


    updatePlayArea(matrix);
    getMissions();
    console.log(givenMissions);
    getElementToBePut();
    playerArea.addEventListener('click', drawElement);
    playerArea.addEventListener('mousemove', drawDraft);
    rotate.addEventListener('click', rotateAndUpdate);
    mirror.addEventListener('click', mirrorAndUpdate);
    showSeason();
    localClear.addEventListener('click', () => {
        localStorage.clear();
        location.reload();
    }); // csak tesztel√©shez kellett, de benn hagyom a v√©glegesben is
})




// Egy olyan m√°trix l√©trehoz√°sa, amely a t√°bl√°zat adatait fogja t√°rolni: 11x11-es mx.
let matrix = Array.from({ length: 11 }, () =>
    Array.from({ length: 11 }, () => 0)
);

// Ha van mentett j√°t√©k akkor a m√°trixot a localStorage-b√≥l t√∂ltj√ºk be
const loadedMatrix = JSON.parse(localStorage.getItem('saveMatrix'));
if (loadedMatrix) matrix = loadedMatrix;

// A hegyek fixek, ezeket m√°r el is tudjuk t√°rolni a t√∂mbben

matrix[1][1] = 'mountain';
matrix[3][8] = 'mountain';
matrix[5][3] = 'mountain';
matrix[8][9] = 'mountain';
matrix[9][5] = 'mountain';



/**
 * A m√°trix alapj√°n megjelen√≠ti a j√°t√©kteret
 * @param {*} matrix ezen m√°trix alapj√°n updateli, k√©t fajta m√°trix lesz neki majd odaadva k√©s≈ëbb (matrix √©s copyMatrix)
 * @param {*} isDraft ha a draft kirajzol√°sakor h√≠vjuk meg akkor truet adunk ide, am√∫gy meg false
 */
function updatePlayArea(matrix, isDraft = false) {
    let out = "";
    for (const elem of matrix) {
        out += '<tr>';
        for (const elem2 of elem) {
            if (elem2 !== 0) out += `<td><img src="${elem2}.jpg"></img></td>`
            else out += `<td><img src="empty.jpg"></img></td>`;
        }
        out += '</tr>';
    }
    document.getElementById('playerArea').innerHTML = out;
    if (!isDraft) localStorage.setItem('saveMatrix', JSON.stringify(matrix)); // m√°trix elment√©se a localStorage-ba, ha nem a draft kirajzol√°sa h√≠vta meg a fv-t
}

let randomElement;
/**
 * A lehelyezend≈ë elem kisorsol√°sa
 * @param {*} event 
 */
function getElementToBePut(event) {
    const loadedRandomElement = JSON.parse(localStorage.getItem('saveRandomElement'));
    if (loadedRandomElement) {
        randomElement = loadedRandomElement; // ha m√°r van mentett, akkor abb√≥l t√∂ltj√ºk be
        updateElementToBePut();
    } else { // ha nincs akkor sorsolunk random
        randomElement = elements[(Math.floor(Math.random() * elements.length))];
        localStorage.setItem('saveRandomElement', JSON.stringify(randomElement)); // ment√©s
        updateElementToBePut();
    }

}
/**
 * A lehelyezend≈ë elem kijelz√©se
 */
function updateElementToBePut() {
    let out = "";
    out += `${randomElement.time}üïë<br>`;
    out += '<table class="centerTable">';
    for (let i = 0; i < 3; i++) {
        out += '<tr>';
        for (let j = 0; j < 3; j++) {
            if (randomElement.shape[i][j] === 1) {
                out += `<td><img src="${randomElement.type}.jpg"></img></td>`
            } else {
                out += `<td></td>`
            }

        }
        out += '</tr>'


    }
    out += '</table>';
    document.getElementById('elemToBePut').innerHTML = out;
}

let hatarvidekPoints = 0;
let time = 28;

if (localStorage.saveTime) time = localStorage.saveTime;

/**
 * Kirajzolja z√∂lden azokat a mez≈ëket, ahova ker√ºlne a lehelyezend≈ë elem, ha az adott cell√°ba kattintana a felhaszn√°l√≥
 * @param {*} event 
 * @returns early return only
 */
function drawDraft(event) {
    if (event.target.tagName == 'IMG' && time !== 0) { // ha time=0 akkor m√°r ne fusson le a folyamat
        try { // az√©rt ker√ºl try-ba, mert ha lel√≥gna a lehelyezend≈ë elem a j√°t√©kt√©rr≈ël akkor kiv√©telt dob
            // K√©s≈ëbbi sz√°m√≠t√°sokhoz kelleni fog, hogy hanyadik sor hanyadik oszlop√°ba kattintottunk
            let row = event.target.parentNode.parentNode.rowIndex;
            let col = event.target.parentNode.cellIndex;

            for (let i = 0; i < 3; i++) {
                for (let j = 0; j < 3; j++) {

                    if (randomElement.shape[i][j] === 1 && matrix[row + i][col + j] !== 0) {
                        console.log("Az elem nem tehet≈ë le!");
                        return;
                    }

                }
            }

            let copyMatrix = [];
            for (let i = 0; i < 11; i++) {
                copyMatrix[i] = [];
                for (let j = 0; j < 11; j++) {
                    copyMatrix[i][j] = matrix[i][j];
                }

            }
            updateMatrixWithElement(row, col, copyMatrix, true); // ezzel sz√≠nezi ki z√∂ldre jelezve, hogy ha az adott mez≈ëre kattintana a felhaszn√°l√≥ akkor hova ker√ºlne
            updatePlayArea(copyMatrix, true);

        } catch {
            console.log("Az elem nem tehet≈ë le!");
        }




    }

}

/**
 * Kattint√°skor elv√©gzend≈ë m≈±velet, lehelyezi az elemet.
 * @param {*} event 
 * @returns early return only
 */
function drawElement(event) {
    if (event.target.tagName == 'IMG' && time !== 0) { // ha time=0 akkor m√°r ne fusson le a folyamat
        try { // hasonl√≥an mint az el≈ëz≈ën√©l
            // K√©s≈ëbbi sz√°m√≠t√°sokhoz kelleni fog, hogy hanyadik sor hanyadik oszlop√°ba kattintottunk
            let row = event.target.parentNode.parentNode.rowIndex;
            let col = event.target.parentNode.cellIndex;

            for (let i = 0; i < 3; i++) {
                for (let j = 0; j < 3; j++) {

                    if (randomElement.shape[i][j] === 1 && matrix[row + i][col + j] !== 0) {
                        console.log("Az elem nem tehet≈ë le!");
                        return;
                    }

                }
            }
            updateMatrixWithElement(row, col, matrix);
            updatePlayArea(matrix); // ez √©rtelemszer≈±en el fogja t≈±ntetni az esetlegesen kirajzolt draftot, l√°sd el≈ëz≈ë f√ºggv√©ny
        } catch {
            console.log("Az elem nem tehet≈ë le!");
        }

        localStorage.removeItem('saveRandomElement'); // t√∂r√∂lni kell a t√°rhelyb≈ël, hiszen √∫jat fogunk gener√°lni ezut√°n
        if (time - randomElement.time > 0) {
            if (time === 22) time = 21; // √©vszak v√©g√©n mindegy milyen id≈ë√©rt√©k≈± elem lett kih√∫zva az √©vszak v√©get√©r
            else if (time === 15) time = 14; // √©vszak v√©g√©n mindegy milyen id≈ë√©rt√©k≈± elem lett kih√∫zva az √©vszak v√©get√©r
            else if (time === 8) time = 7; // √©vszak v√©g√©n mindegy milyen id≈ë√©rt√©k≈± elem lett kih√∫zva az √©vszak v√©get√©r
            else {
                time -= randomElement.time;
                console.log('Az id≈ë:' + time);
                getElementToBePut(); // k√∂vetkez≈ë elem kisorolsol√°sa, hiszen az id≈ë ellen≈ërz√©s√©vel tudjuk, hogy van m√©g
                elements = elements.filter(x => x !== randomElement);
                localStorage.setItem('saveElements', JSON.stringify(elements)); // sorsolhat√≥ elemek elment√©se
            }
            localStorage.saveTime = time;
        } else { // azaz a j√°t√©k v√©g√©n
            document.getElementById('results').innerHTML += `
            <br> EL√âRT PONT a Hat√°rvid√©k k√ºldet√©ssel: ${getHatarvidekMissionPoints()} 
            <br> EL√âRT PONT az Erd≈ë Sz√©le k√ºldet√©ssel:${getAzErdoSzeleMissionPoints()}
            <br> EL√âRT PONT az √Ålmos-v√∂lgy k√ºldet√©ssel:${getAlmosVolgyPoints()}
            <br> EL√âRT PONT a Krumpli√∂nt√∂z√©s k√ºldet√©ssel: ${getKrumpliOntozesPoints()}
            <br> EL√âRT PONT a hegyek k√∂rbeker√≠t√©s√©vel: ${getHegyKorbeKeritesPoints()}
            <br> EL√âRT PONT a Gazdag V√°ros k√ºldet√©ssel: ${getGazdagVarosPoints()}
            <br> EL√âRT PONT a Fasor k√ºldet√©ssel: ${getFasorPoints()}
            <br> EL√âRT PONT az √ñnt√∂z≈ëcsatorna k√ºldet√©ssel: ${getOntozocsatornaPoints()}
            <br> EL√âRT PONT a M√°gusok v√∂lgye k√ºldet√©ssel: ${getMagusokVolgyePoints()}
            <br> EL√âRT PONT az √úres telek k√ºldet√©ssel: ${getUresTelekPoints()}
            <br> EL√âRT PONT a Sorh√°z k√ºldet√©ssel: ${getSorhazPoints()}
            <br> EL√âRT PONT a P√°ratlan sil√≥k k√ºldet√©ssel: ${getParatlanSilokPoints()}
            <br> EL√âRT PONT a Gazdag vid√©k k√ºldet√©ssel: ${getGazdagVidekPoints()}</b>`;
            time = 0;
            document.getElementById('buttonsForMirrorAndRotate').style.display = 'none'; // mivel nincs t√∂bb elem -> gombokat elrejtem
            localStorage.clear() // j√°t√©k v√©g√©n t√∂rl√∂m a mentett √°llapotokat
        }
        showSeason();

    }
}
let allPoints = 0;
if (localStorage.saveAllPoints) allPoints = parseInt(localStorage.saveAllPoints);


/**
 * Egy m√°trix transzpon√°l√°s√°ra
 * @param {*} m transzpon√°land√≥ m√°trix
 * @returns transzpon√°lt m√°trix
 */
const transpose = (m) => {
    let [row] = m
    return row.map((value, column) => m.map(row => row[column]))
}


/**
 * A lehelyezend≈ë elemmel friss√≠ti a m√°trixot.
 * @param {*} row a kattintott cella sorsz√°ma
 * @param {*} col a kattintott cella sor√°n bel√ºl az oszlop sz√°ma
 * @param {*} mx az friss√≠tend≈ë m√°trix
 * @param {*} isDraft akkor true ha a draft kirajzol√°sa h√≠vta meg, egy√©bk√©nt false
 */
function updateMatrixWithElement(row, col, mx, isDraft = false) {
    for (let i = 0; i < 3; i++) {
        for (let j = 0; j < 3; j++) {

            if (randomElement.shape[i][j] === 1 && mx[row + i][col + j] === 0) {
                if (isDraft) {
                    mx[row + i][col + j] = 'good';
                } else {
                    mx[row + i][col + j] = randomElement.type;
                }


            }

        }
    }
}

function rotateAndUpdate(event) {
    randomElement.shape = rotateMatrix(randomElement.shape);
    updateElementToBePut();
}

function mirrorAndUpdate(event) {
    randomElement.shape = mirrorMatrixVertical(randomElement.shape);
    updateElementToBePut();
}